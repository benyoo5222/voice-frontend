{"ast":null,"code":"var _jsxFileName = \"/Users/benyoo/Desktop/voice-frontend/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\nimport audioUtils from './lib/audioUtils';\nimport mic from 'microphone-stream'; // import marshaller from '@aws-sdk/eventstream-marshaller';\n// import util_utf8_node from '@aws-sdk/util-utf8-node';\n\nconst marshaller = require(\"@aws-sdk/eventstream-marshaller\"); // for converting binary event stream messages to and from JSON\n\n\nconst util_utf8_node = require(\"@aws-sdk/util-utf8-node\"); // const AudioContext = window.AudioContext || window.webkitAudioContext;\n// const context = new AudioContext();\n// const key = process.env.KEY;\n// const secret_key = process.env.SECRET_KEY;\n// const session_token = process.env.SESSION_TOKEN;\n// const region = process.env.REGION;\n// const language = process.env.LANGUAGE;\n// const sampleRate = process.env.SAMPLE_RATE;\n\n\nlet socket;\nlet micStream;\nlet inputSampleRate;\nconst eventStreamMarshaller = new marshaller.EventStreamMarshaller(util_utf8_node.toUtf8, util_utf8_node.fromUtf8);\nconst websocket = new WebSocket('ws://localhost:8000'); //put url\n\nwebsocket.binaryType = \"arraybuffer\";\n\nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!!!!!!!\");\n};\n\nwebsocket.onmessage = message => {\n  console.log(\"MESSAGE\", message);\n};\n\nconst getAudioEventMessage = buffer => {\n  // wrap the audio data in a JSON envelope\n  return {\n    headers: {\n      ':message-type': {\n        type: 'string',\n        value: 'event'\n      },\n      ':event-type': {\n        type: 'string',\n        value: 'AudioEvent'\n      }\n    },\n    body: buffer\n  };\n};\n\nfunction convertAudioToBinaryMessage(audioChunk) {\n  let raw = mic.toRaw(audioChunk);\n  console.log(\"RAW\", raw);\n  if (raw == null) return; // downsample and convert the raw audio bytes to PCM\n\n  console.log(\"inputSamplerate\", inputSampleRate);\n  let downsampledBuffer = audioUtils.downsampleBuffer(raw, inputSampleRate, 16000);\n  let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer); // add the right JSON headers and structure to the message\n\n  let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer)); //convert the JSON object + headers into a binary event stream message\n\n  let binary = eventStreamMarshaller.marshall(audioEventMessage);\n  return binary;\n}\n\n;\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    console.log(\"STREAm!!!\", stream);\n    micStream = new mic();\n    micStream.on(\"format\", function (data) {\n      inputSampleRate = data.sampleRate;\n    });\n    micStream.setStream(stream); // const websocket = new WebSocket('ws://localhost:8000'); //put url\n    // websocket.binaryType = \"arraybuffer\";\n\n    micStream.on('data', function (rawAudioChunk) {\n      // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n      console.log(\"DATA\", rawAudioChunk); //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n\n      let binary = convertAudioToBinaryMessage(rawAudioChunk);\n      console.log(\"Binary\", binary);\n      let raw = mic.toRaw(rawAudioChunk);\n      console.log(\"RAW\", raw);\n      if (raw == null) return;\n      websocket.send(JSON.stringify({\n        connectionID: 3333,\n        audio: raw\n      })); // if (socket.readyState === socket.OPEN)\n      //     socket.send(binary);\n    }); // websocket.onopen = () => {\n    //   console.log(\"Connected\");\n    //   micStream.on('data', function(rawAudioChunk) {\n    //     // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n    //     console.log(\"DATA\", rawAudioChunk);\n    //     //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n    //     let binary = convertAudioToBinaryMessage(rawAudioChunk);\n    //     console.log(\"Binary\", binary);\n    //     websocket.send(binary);\n    //     // if (socket.readyState === socket.OPEN)\n    //     //     socket.send(binary);\n    //   })    \n    // };\n\n    websocket.onerror = () => {\n      console.log(\"Error!!!!!!!!!\");\n    };\n\n    websocket.onmessage = message => {\n      console.log(\"MESSAGE\", message);\n    };\n  }).catch(err => {\n    console.log(\"error\", err);\n  });\n};\n\nfunction App() {\n  handleListen();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 16\n    }\n  }, \"src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link\",\n    href: \"https://reactjs.org\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Learn React\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benyoo/Desktop/voice-frontend/src/App.js"],"names":["React","crypto","v4","audioUtils","mic","marshaller","require","util_utf8_node","socket","micStream","inputSampleRate","eventStreamMarshaller","EventStreamMarshaller","toUtf8","fromUtf8","websocket","WebSocket","binaryType","onopen","console","log","onerror","onmessage","message","getAudioEventMessage","buffer","headers","type","value","body","convertAudioToBinaryMessage","audioChunk","raw","toRaw","downsampledBuffer","downsampleBuffer","pcmEncodedBuffer","pcmEncode","audioEventMessage","Buffer","from","binary","marshall","handleListen","navigator","mediaDevices","getUserMedia","audio","then","stream","on","data","sampleRate","setStream","rawAudioChunk","send","JSON","stringify","connectionID","catch","err","App","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\nimport audioUtils from './lib/audioUtils';\nimport mic from 'microphone-stream';\n\n// import marshaller from '@aws-sdk/eventstream-marshaller';\n// import util_utf8_node from '@aws-sdk/util-utf8-node';\n\nconst marshaller = require(\"@aws-sdk/eventstream-marshaller\"); // for converting binary event stream messages to and from JSON\nconst util_utf8_node = require(\"@aws-sdk/util-utf8-node\");\n\n// const AudioContext = window.AudioContext || window.webkitAudioContext;\n// const context = new AudioContext();\n// const key = process.env.KEY;\n// const secret_key = process.env.SECRET_KEY;\n// const session_token = process.env.SESSION_TOKEN;\n// const region = process.env.REGION;\n// const language = process.env.LANGUAGE;\n// const sampleRate = process.env.SAMPLE_RATE;\n\nlet socket;\nlet micStream;\nlet inputSampleRate;\n\nconst eventStreamMarshaller = new marshaller.EventStreamMarshaller(util_utf8_node.toUtf8, util_utf8_node.fromUtf8);\n\nconst websocket = new WebSocket('ws://localhost:8000'); //put url\nwebsocket.binaryType = \"arraybuffer\";\n\nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!!!!!!!\")\n}\n\nwebsocket.onmessage = (message) => {\n  console.log(\"MESSAGE\", message);\n};\n\nconst getAudioEventMessage = (buffer) => {\n  // wrap the audio data in a JSON envelope\n  return {\n      headers: {\n          ':message-type': {\n              type: 'string',\n              value: 'event'\n          },\n          ':event-type': {\n              type: 'string',\n              value: 'AudioEvent'\n          }\n      },\n      body: buffer\n  };\n};\n\nfunction convertAudioToBinaryMessage(audioChunk) {\n  let raw = mic.toRaw(audioChunk);\n  console.log(\"RAW\", raw);\n  if (raw == null)\n      return;\n\n  // downsample and convert the raw audio bytes to PCM\n  console.log(\"inputSamplerate\", inputSampleRate);\n  let downsampledBuffer = audioUtils.downsampleBuffer(raw, inputSampleRate, 16000);\n  let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer);\n\n  // add the right JSON headers and structure to the message\n  let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n\n  //convert the JSON object + headers into a binary event stream message\n  let binary = eventStreamMarshaller.marshall(audioEventMessage);\n\n  return binary;\n};\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n  }).then((stream) => {\n    console.log(\"STREAm!!!\", stream)\n    micStream = new mic();\n\n    micStream.on(\"format\", function(data) {\n        inputSampleRate = data.sampleRate;\n    });\n\n    micStream.setStream(stream);\n\n    // const websocket = new WebSocket('ws://localhost:8000'); //put url\n    // websocket.binaryType = \"arraybuffer\";\n\n    micStream.on('data', function(rawAudioChunk) {\n      // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n      console.log(\"DATA\", rawAudioChunk);\n      //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n      let binary = convertAudioToBinaryMessage(rawAudioChunk);\n      console.log(\"Binary\", binary);\n      let raw = mic.toRaw(rawAudioChunk);\n  console.log(\"RAW\", raw);\n  if (raw == null)\n      return;\n\n      websocket.send(JSON.stringify({connectionID: 3333, audio: raw}));\n      // if (socket.readyState === socket.OPEN)\n      //     socket.send(binary);\n    })    \n\n    // websocket.onopen = () => {\n    //   console.log(\"Connected\");\n    //   micStream.on('data', function(rawAudioChunk) {\n    //     // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n    //     console.log(\"DATA\", rawAudioChunk);\n    //     //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n    //     let binary = convertAudioToBinaryMessage(rawAudioChunk);\n    //     console.log(\"Binary\", binary);\n  \n    //     websocket.send(binary);\n    //     // if (socket.readyState === socket.OPEN)\n    //     //     socket.send(binary);\n    //   })    \n    // };\n\n\n    websocket.onerror = () => {\n      console.log(\"Error!!!!!!!!!\")\n    }\n    \n    websocket.onmessage = (message) => {\n      console.log(\"MESSAGE\", message);\n    };\n  })\n  .catch((err) => {\n    console.log(\"error\", err);\n  })\n};\n\nfunction App() {\n  handleListen();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
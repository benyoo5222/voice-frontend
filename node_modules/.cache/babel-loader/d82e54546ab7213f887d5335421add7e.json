{"ast":null,"code":"var _jsxFileName = \"/Users/benyoo/Desktop/voice-frontend/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\nimport mic from 'microphone-stream';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = process.env.SAMPLE_RATE;\nlet socket;\nlet micStream;\nconst websocket = new WebSocket('ws://localhost:8000'); //put url\n\nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!!!!!!!!\");\n};\n\nwebsocket.onmessage = message => {\n  console.log(\"MESSAGE\", message);\n};\n\nconst process_microphone_buffer = event => {\n  console.log(event);\n  console.log(\"TEST!\".websocket);\n\n  if (websocket) {\n    websocket.send(event.inputBuffer.getChannelData(0)); // console.log(event.inputBuffer)\n    // console.log(\"OPEN!!!\", event.inputBuffer.getChannelData(0));\n    // websocket.send(JSON.stringify({\n    //   action: 'default',\n    //   arrayOfAudioInfo: Array.from(event.inputBuffer.getChannelData(0))\n    // }));\n  }\n};\n\nmicStream.on('data', function (rawAudioChunk) {\n  // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n  console.log(\"DATA\", rawAudioChunk); //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n  // if (socket.readyState === socket.OPEN)\n  //     socket.send(binary);\n});\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    console.log(\"STREAm!!!\", stream);\n    micStream = new mic();\n    micStream.on(\"format\", function (data) {\n      inputSampleRate = data.sampleRate;\n    });\n    micStream.setStream(stream); // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n    // const microphone = context.createMediaStreamSource(stream); // create note\n    // console.log(\"microphon!e\", microphone)\n    // //microphone.connect(gain_node);\n    // const node = context.createScriptProcessor(4096, 1, 1); // create note\n    // // listen to the audio data, and record into the buffer\n    // microphone.connect(node);\n    // node.connect(microphone.context.destination)\n    // // const url = createPresignedUrl();\n    // // socket = new window.WebsSocket(url);\n    // // socket.binaryType = 'arraybuffer';\n    // node.onaudioprocess = process_microphone_buffer;\n  }).catch(err => {\n    console.log(\"error\", err);\n  });\n};\n\nfunction App() {\n  handleListen();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }\n  }, \"src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link\",\n    href: \"https://reactjs.org\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, \"Learn React\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benyoo/Desktop/voice-frontend/src/App.js"],"names":["React","crypto","v4","mic","AudioContext","window","webkitAudioContext","context","key","process","env","KEY","secret_key","SECRET_KEY","session_token","SESSION_TOKEN","region","REGION","language","LANGUAGE","sampleRate","SAMPLE_RATE","socket","micStream","websocket","WebSocket","onopen","console","log","onerror","onmessage","message","process_microphone_buffer","event","send","inputBuffer","getChannelData","on","rawAudioChunk","handleListen","navigator","mediaDevices","getUserMedia","audio","then","stream","data","inputSampleRate","setStream","catch","err","App","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\nimport mic from 'microphone-stream';\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = process.env.SAMPLE_RATE;\n\nlet socket;\nlet micStream;\n\nconst websocket = new WebSocket('ws://localhost:8000'); //put url\n  \nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!!!!!!!!\")\n}\n\nwebsocket.onmessage = (message) => {\n  console.log(\"MESSAGE\", message);\n};\n\nconst process_microphone_buffer = (event) => {\n  console.log(event)\n  console.log(\"TEST!\". websocket)\n  if (websocket) {\n    websocket.send(event.inputBuffer.getChannelData(0));\n    // console.log(event.inputBuffer)\n    // console.log(\"OPEN!!!\", event.inputBuffer.getChannelData(0));\n    // websocket.send(JSON.stringify({\n    //   action: 'default',\n    //   arrayOfAudioInfo: Array.from(event.inputBuffer.getChannelData(0))\n    // }));\n  }\n}\n\nmicStream.on('data', function(rawAudioChunk) {\n  // the audio stream is raw audio bytes. Transcribe expects PCM with additional metadata, encoded as binary\n  console.log(\"DATA\", rawAudioChunk);\n  //let binary = convertAudioToBinaryMessage(rawAudioChunk);\n\n  // if (socket.readyState === socket.OPEN)\n  //     socket.send(binary);\n})\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n  }).then((stream) => {\n    console.log(\"STREAm!!!\", stream)\n    micStream = new mic();\n\n    micStream.on(\"format\", function(data) {\n        inputSampleRate = data.sampleRate;\n    });\n\n    micStream.setStream(stream);\n\n    // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n    \n    // const microphone = context.createMediaStreamSource(stream); // create note\n    // console.log(\"microphon!e\", microphone)\n    // //microphone.connect(gain_node);\n\n    // const node = context.createScriptProcessor(4096, 1, 1); // create note\n    // // listen to the audio data, and record into the buffer\n    // microphone.connect(node);\n    // node.connect(microphone.context.destination)\n\n    // // const url = createPresignedUrl();\n    // // socket = new window.WebsSocket(url);\n    // // socket.binaryType = 'arraybuffer';\n\n    // node.onaudioprocess = process_microphone_buffer;\n    \n  })\n  .catch((err) => {\n    console.log(\"error\", err);\n  })\n};\n\nfunction App() {\n  handleListen();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
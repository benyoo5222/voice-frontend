{"ast":null,"code":"var _jsxFileName = \"/Users/benyoo/Desktop/voice-frontend/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport v4 from './lib/aws-signature-v4';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = 44100;\nlet socket;\n\nfunction createPresignedUrl() {\n  let endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\"; // get a preauthenticated URL that we can use to establish our WebSocket\n\n  return v4.createPresignedURL('GET', endpoint, '/stream-transcription-websocket', 'transcribe', crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n    'key': key,\n    'secret': secret_key,\n    'sessionToken': session_token,\n    'protocol': 'wss',\n    'expires': 15,\n    'region': region,\n    'query': \"language-code=\" + language + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n  });\n}\n\nfunction process_microphone_buffer(event) {\n  var i, N, inp, microphone_output_buffer; //console.log(\"Input\", event.inputBuffer);\n\n  microphone_output_buffer = event.inputBuffer.getChannelData(0); // just mono - 1 channel for now\n}\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    console.log(\"STREAm!!!\", stream); // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n\n    const microphone = context.createMediaStreamSource(stream);\n    console.log(\"microphone\", microphone); //microphone.connect(gain_node);\n\n    const node = context.createScriptProcessor(2048, 1, 1); // listen to the audio data, and record into the buffer\n\n    microphone.connect(node);\n    node.connect(microphone.context.destination);\n    const url = createPresignedUrl();\n    socket = new window.WebsSocket(url);\n    socket.binaryType = 'arraybuffer';\n    node.onaudioprocess = process_microphone_buffer;\n  }).catch(err => {\n    console.log(\"error\", err);\n  });\n};\n\nfunction App() {\n  handleListen();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 16\n    }\n  }, \"src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link\",\n    href: \"https://reactjs.org\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Learn React\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benyoo/Desktop/voice-frontend/src/App.js"],"names":["React","v4","AudioContext","window","webkitAudioContext","context","key","process","env","KEY","secret_key","SECRET_KEY","session_token","SESSION_TOKEN","region","REGION","language","LANGUAGE","sampleRate","socket","createPresignedUrl","endpoint","createPresignedURL","crypto","createHash","update","digest","process_microphone_buffer","event","i","N","inp","microphone_output_buffer","inputBuffer","getChannelData","handleListen","navigator","mediaDevices","getUserMedia","audio","then","stream","console","log","microphone","createMediaStreamSource","node","createScriptProcessor","connect","destination","url","WebsSocket","binaryType","onaudioprocess","catch","err","App","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport v4 from './lib/aws-signature-v4';\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = 44100;\n\nlet socket;\n\nfunction createPresignedUrl() {\n  let endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\";\n\n  // get a preauthenticated URL that we can use to establish our WebSocket\n  return v4.createPresignedURL(\n      'GET',\n      endpoint,\n      '/stream-transcription-websocket',\n      'transcribe',\n      crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n          'key': key,\n          'secret': secret_key,\n          'sessionToken': session_token,\n          'protocol': 'wss',\n          'expires': 15,\n          'region': region,\n          'query': \"language-code=\" + language + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n      }\n  );\n}\n\nfunction process_microphone_buffer(event) {\n\n  var i, N, inp, microphone_output_buffer;\n  //console.log(\"Input\", event.inputBuffer);\n  microphone_output_buffer = event.inputBuffer.getChannelData(0); // just mono - 1 channel for now\n}\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n  }).then((stream) => {\n    console.log(\"STREAm!!!\", stream)\n    // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n    \n    const microphone = context.createMediaStreamSource(stream);\n    console.log(\"microphone\", microphone)\n    //microphone.connect(gain_node);\n\n    const node = context.createScriptProcessor(2048, 1, 1);\n    // listen to the audio data, and record into the buffer\n    microphone.connect(node);\n    node.connect(microphone.context.destination)\n\n    const url = createPresignedUrl();\n    socket = new window.WebsSocket(url);\n    socket.binaryType = 'arraybuffer';\n\n    node.onaudioprocess = process_microphone_buffer;\n    \n\n  })\n  .catch((err) => {\n    console.log(\"error\", err);\n  })\n};\n\nfunction App() {\n  handleListen();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
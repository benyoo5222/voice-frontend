{"ast":null,"code":"function pcmEncode(input) {\n  var offset = 0;\n  var buffer = new ArrayBuffer(input.length * 2);\n  var view = new DataView(buffer);\n\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]));\n    view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n  }\n\n  return buffer;\n}\n\nfunction downsampleBuffer(buffer, inputSampleRate = 44100, outputSampleRate = 16000) {\n  if (outputSampleRate === inputSampleRate) {\n    return buffer;\n  }\n\n  var sampleRateRatio = inputSampleRate / outputSampleRate;\n  var newLength = Math.round(buffer.length / sampleRateRatio);\n  var result = new Float32Array(newLength);\n  var offsetResult = 0;\n  var offsetBuffer = 0;\n\n  while (offsetResult < result.length) {\n    var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n    var accum = 0,\n        count = 0;\n\n    for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i];\n      count++;\n    }\n\n    result[offsetResult] = accum / count;\n    offsetResult++;\n    offsetBuffer = nextOffsetBuffer;\n  }\n\n  return result;\n}\n\nmodule.exports = {\n  pcmEncode,\n  downsampleBuffer\n};","map":{"version":3,"sources":["/Users/benyoo/Desktop/voice-frontend/src/lib/audioUtils.js"],"names":["pcmEncode","input","offset","buffer","ArrayBuffer","length","view","DataView","i","s","Math","max","min","setInt16","downsampleBuffer","inputSampleRate","outputSampleRate","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","module","exports"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,IAAIC,WAAJ,CAAgBH,KAAK,CAACI,MAAN,GAAe,CAA/B,CAAb;AACA,MAAIC,IAAI,GAAG,IAAIC,QAAJ,CAAaJ,MAAb,CAAX;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACI,MAA1B,EAAkCG,CAAC,IAAIN,MAAM,IAAI,CAAjD,EAAoD;AAChD,QAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYX,KAAK,CAACO,CAAD,CAAjB,CAAb,CAAR;AACAF,IAAAA,IAAI,CAACO,QAAL,CAAcX,MAAd,EAAsBO,CAAC,GAAG,CAAJ,GAAQA,CAAC,GAAG,MAAZ,GAAqBA,CAAC,GAAG,MAA/C,EAAuD,IAAvD;AACH;;AACD,SAAON,MAAP;AACH;;AAED,SAASW,gBAAT,CAA0BX,MAA1B,EAAkCY,eAAe,GAAG,KAApD,EAA2DC,gBAAgB,GAAG,KAA9E,EAAqF;AAEjF,MAAIA,gBAAgB,KAAKD,eAAzB,EAA0C;AACtC,WAAOZ,MAAP;AACH;;AAED,MAAIc,eAAe,GAAGF,eAAe,GAAGC,gBAAxC;AACA,MAAIE,SAAS,GAAGR,IAAI,CAACS,KAAL,CAAWhB,MAAM,CAACE,MAAP,GAAgBY,eAA3B,CAAhB;AACA,MAAIG,MAAM,GAAG,IAAIC,YAAJ,CAAiBH,SAAjB,CAAb;AACA,MAAII,YAAY,GAAG,CAAnB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AAEA,SAAOD,YAAY,GAAGF,MAAM,CAACf,MAA7B,EAAqC;AAEjC,QAAImB,gBAAgB,GAAGd,IAAI,CAACS,KAAL,CAAW,CAACG,YAAY,GAAG,CAAhB,IAAqBL,eAAhC,CAAvB;AAEA,QAAIQ,KAAK,GAAG,CAAZ;AAAA,QACAC,KAAK,GAAG,CADR;;AAGA,SAAK,IAAIlB,CAAC,GAAGe,YAAb,EAA2Bf,CAAC,GAAGgB,gBAAJ,IAAwBhB,CAAC,GAAGL,MAAM,CAACE,MAA9D,EAAsEG,CAAC,EAAvE,EAA4E;AACxEiB,MAAAA,KAAK,IAAItB,MAAM,CAACK,CAAD,CAAf;AACAkB,MAAAA,KAAK;AACR;;AAEDN,IAAAA,MAAM,CAACE,YAAD,CAAN,GAAuBG,KAAK,GAAGC,KAA/B;AACAJ,IAAAA,YAAY;AACZC,IAAAA,YAAY,GAAGC,gBAAf;AAEH;;AAED,SAAOJ,MAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,SADe;AAEfc,EAAAA;AAFe,CAAjB","sourcesContent":["function pcmEncode(input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n    for (var i = 0; i < input.length; i++, offset += 2) {\n        var s = Math.max(-1, Math.min(1, input[i]));\n        view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n    }\n    return buffer;\n}\n\nfunction downsampleBuffer(buffer, inputSampleRate = 44100, outputSampleRate = 16000) {\n        \n    if (outputSampleRate === inputSampleRate) {\n        return buffer;\n    }\n\n    var sampleRateRatio = inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    \n    while (offsetResult < result.length) {\n\n        var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\n        var accum = 0,\n        count = 0;\n        \n        for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++ ) {\n            accum += buffer[i];\n            count++;\n        }\n\n        result[offsetResult] = accum / count;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n\n    }\n\n    return result;\n}\n\nmodule.exports = {\n  pcmEncode,\n  downsampleBuffer\n};"]},"metadata":{},"sourceType":"module"}
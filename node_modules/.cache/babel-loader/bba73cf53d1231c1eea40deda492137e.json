{"ast":null,"code":"var _jsxFileName = \"/Users/benyoo/Desktop/voice-frontend/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = process.env.SAMPLE_RATE;\nlet socket; // const createPresignedUrl = () => {\n//   const endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\";\n//   // get a preauthenticated URL that we can use to establish our WebSocket\n//   return v4.createPresignedURL(\n//       'GET',\n//       endpoint,\n//       '/stream-transcription-websocket',\n//       'transcribe',\n//       crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n//           'key': key,\n//           'secret': secret_key,\n//           'sessionToken': session_token,\n//           'protocol': 'wss',\n//           'expires': 15,\n//           'region': region,\n//           'query': \"language-code=\" + language + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n//       }\n//   );\n// }\n// const convertAudioToBinaryMessage = (audioChunk) => {\n//   let raw = mic.toRaw(audioChunk);\n//   if (raw == null)\n//       return;\n//   // downsample and convert the raw audio bytes to PCM\n//   let downsampledBuffer = audioUtils.downsampleBuffer(raw, inputSampleRate, sampleRate);\n//   let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer);\n//   // add the right JSON headers and structure to the message\n//   let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n//   //convert the JSON object + headers into a binary event stream message\n//   let binary = eventStreamMarshaller.marshall(audioEventMessage);\n//   return binary;\n// }\n\nconst websocket = new WebSocket('wss://9ttdj4p8he.execute-api.us-east-1.amazonaws.com/dev'); //put url\n\nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!\");\n};\n\nconst process_microphone_buffer = event => {\n  event.inputBuffer.getChannelData(0); //console.log(\"TEST\". websocket)\n\n  if (websocket) {\n    // websocket.send(event.inputBuffer.getChannelData(0));\n    console.log(event.inputBuffer);\n    console.log(\"OPEN!!!!\", event.inputBuffer.getChannelData(0));\n    websocket.send(JSON.stringify({\n      action: 'default',\n      message: Array.from(event.inputBuffer.getChannelData(0))\n    })); //websocket.send(event.inputBuffer.getChannelData(0))\n    // websocket.send({\n    //   action: 'default',\n    //   message: 'testing!'\n    // });\n  }\n};\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    console.log(\"STREAm!!!\", stream); // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n\n    const microphone = context.createMediaStreamSource(stream); // create note\n\n    console.log(\"microphone\", microphone); //microphone.connect(gain_node);\n\n    const node = context.createScriptProcessor(2048, 1, 1); // create note\n    // listen to the audio data, and record into the buffer\n\n    microphone.connect(node);\n    node.connect(microphone.context.destination); // const url = createPresignedUrl();\n    // socket = new window.WebsSocket(url);\n    // socket.binaryType = 'arraybuffer';\n\n    node.onaudioprocess = process_microphone_buffer;\n  }).catch(err => {\n    console.log(\"error\", err);\n  });\n};\n\nfunction App() {\n  handleListen();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \"Edit \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 16\n    }\n  }, \"src/App.js\"), \" and save to reload.\"), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"App-link\",\n    href: \"https://reactjs.org\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"Learn React\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/benyoo/Desktop/voice-frontend/src/App.js"],"names":["React","crypto","v4","AudioContext","window","webkitAudioContext","context","key","process","env","KEY","secret_key","SECRET_KEY","session_token","SESSION_TOKEN","region","REGION","language","LANGUAGE","sampleRate","SAMPLE_RATE","socket","websocket","WebSocket","onopen","console","log","onerror","process_microphone_buffer","event","inputBuffer","getChannelData","send","JSON","stringify","action","message","Array","from","handleListen","navigator","mediaDevices","getUserMedia","audio","then","stream","microphone","createMediaStreamSource","node","createScriptProcessor","connect","destination","onaudioprocess","catch","err","App","logo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport crypto from 'crypto';\nimport v4 from './lib/aws-signature-v4';\n\nconst AudioContext = window.AudioContext || window.webkitAudioContext;\nconst context = new AudioContext();\nconst key = process.env.KEY;\nconst secret_key = process.env.SECRET_KEY;\nconst session_token = process.env.SESSION_TOKEN;\nconst region = process.env.REGION;\nconst language = process.env.LANGUAGE;\nconst sampleRate = process.env.SAMPLE_RATE;\n\nlet socket;\n\n// const createPresignedUrl = () => {\n//   const endpoint = \"transcribestreaming.\" + region + \".amazonaws.com:8443\";\n\n//   // get a preauthenticated URL that we can use to establish our WebSocket\n//   return v4.createPresignedURL(\n//       'GET',\n//       endpoint,\n//       '/stream-transcription-websocket',\n//       'transcribe',\n//       crypto.createHash('sha256').update('', 'utf8').digest('hex'), {\n//           'key': key,\n//           'secret': secret_key,\n//           'sessionToken': session_token,\n//           'protocol': 'wss',\n//           'expires': 15,\n//           'region': region,\n//           'query': \"language-code=\" + language + \"&media-encoding=pcm&sample-rate=\" + sampleRate\n//       }\n//   );\n// }\n\n// const convertAudioToBinaryMessage = (audioChunk) => {\n//   let raw = mic.toRaw(audioChunk);\n\n//   if (raw == null)\n//       return;\n\n//   // downsample and convert the raw audio bytes to PCM\n//   let downsampledBuffer = audioUtils.downsampleBuffer(raw, inputSampleRate, sampleRate);\n//   let pcmEncodedBuffer = audioUtils.pcmEncode(downsampledBuffer);\n\n//   // add the right JSON headers and structure to the message\n//   let audioEventMessage = getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n\n//   //convert the JSON object + headers into a binary event stream message\n//   let binary = eventStreamMarshaller.marshall(audioEventMessage);\n\n//   return binary;\n// }\n\nconst websocket = new WebSocket('wss://9ttdj4p8he.execute-api.us-east-1.amazonaws.com/dev'); //put url\n  \nwebsocket.onopen = () => {\n  console.log(\"Connected\");\n};\n\nwebsocket.onerror = () => {\n  console.log(\"Error!!!\")\n}\n\nconst process_microphone_buffer = (event) => {\n  event.inputBuffer.getChannelData(0); \n  //console.log(\"TEST\". websocket)\n  if (websocket) {\n    // websocket.send(event.inputBuffer.getChannelData(0));\n    console.log(event.inputBuffer)\n    console.log(\"OPEN!!!!\", event.inputBuffer.getChannelData(0));\n    websocket.send(JSON.stringify({\n      action: 'default',\n      message: Array.from(event.inputBuffer.getChannelData(0))\n    }));\n    //websocket.send(event.inputBuffer.getChannelData(0))\n    // websocket.send({\n    //   action: 'default',\n    //   message: 'testing!'\n    // });\n  }\n}\n\nconst handleListen = () => {\n  navigator.mediaDevices.getUserMedia({\n    audio: true,\n  }).then((stream) => {\n    console.log(\"STREAm!!!\", stream)\n    // var gain_node = context.createGain();\n    // gain_node.connect( context.destination );\n    \n    const microphone = context.createMediaStreamSource(stream); // create note\n    console.log(\"microphone\", microphone)\n    //microphone.connect(gain_node);\n\n    const node = context.createScriptProcessor(2048, 1, 1); // create note\n    // listen to the audio data, and record into the buffer\n    microphone.connect(node);\n    node.connect(microphone.context.destination)\n\n    // const url = createPresignedUrl();\n    // socket = new window.WebsSocket(url);\n    // socket.binaryType = 'arraybuffer';\n\n    node.onaudioprocess = process_microphone_buffer;\n  })\n  .catch((err) => {\n    console.log(\"error\", err);\n  })\n};\n\nfunction App() {\n  handleListen();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}